<start>     ->  <preamble> <body>
<preamble>  ->  package id
<body>      ->  <func> <body>
<body>      ->  EOF
<func>      ->  func id ( <params> ) <ret_types> { <state_list> }
<params>    ->  eps
<params>    ->  <param> <params_n>
<params_n>  ->  eps
<params_n>  ->  , <param> <params_n>
<param>     ->  id <data_type>
<ret_types> ->  eps
<ret_types> ->  <data_type>
<ret_types> ->  ( <types> )
<types>     ->  eps
<types>     ->  <data_type> <types_n>
<types_n>   ->  eps
<types_n>   ->  , <data_type> <types_n>
<data_type> ->  int
<data_type> ->  string
<data_type> ->  float64
<state_list>    ->  eps
<state_list>    ->  <state> <state_list>
<state>     ->  <declr>
<state>     ->  if <expression> { <state_list> } <else> 
<state>     ->  for <for_declr> <expression> ; <expression> { <state_list> }
<state>     ->  return <expression>
<state>     ->  id ( <func_param> )
<state>     ->  id <id_n> = <expr>
<id_n>      ->  eps
<id_n>      ->  , id <id_n>
<func_param>    -> eps
<func_param>    -> <expr> <func_param_n>
<func_param_n>  -> eps
<func_param_n>  -> , <expr> <func_param_n>
<declr>     ->  id := <expression>
<for_declr> ->  <declr> ;
<for_declr> ->  ;
<else>      ->  else { <state_list> }





